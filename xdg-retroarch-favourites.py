#!/usr/bin/python3

import json
import os
import re
from functools import lru_cache


def _user_file(path, mode='r'):
    return open(os.path.expanduser(path), mode)


def _user_dir(path):
    return os.path.expanduser(path)


def _pruned(d):
    return {k: v for k, v in d.items() if v}


def _tokenise(console):
    """Convert console name into ;-seperated list"""
    return re.sub(r"[^\w]+", ";", console)


def read_cfg(path):
    """Retroarch CFG format is not compatible with configparser..."""
    split_properties = [line.split("=") for line in _user_file(path)]
    return {key.strip(): value.strip()[1:-1] for key, value in split_properties}


@lru_cache()
def read_lpl(path):
    """Retroarch has two LPL formats..."""
    print("Reading "+path)
    content = _user_file(path).read()
    if content.startswith('{'):
        return json.loads(content)
    else:
        return None


def find_game(playlists, game_path):
    """Locate game in playlists where it has additional labels"""
    for lpl in (f for f in os.scandir(_user_dir(playlists)) if f.is_file() and f.name.endswith('.lpl')):
        playlist = read_lpl(lpl.path)
        if playlist:
            try:
                return next(_pruned(game) for game in playlist['items'] if game['path'] == game_path)
            except StopIteration:
                pass


HEADER = "# Generated by xdg-retroarch-favourites"
XDG_DIR = _user_dir("~/.local/share/applications")

cfg = read_cfg('~/.config/retroarch/retroarch.cfg')
favs = read_lpl(cfg['content_favorites_path'])
generated = {}

for game in (_pruned(f) for f in favs['items']):
    library = find_game(cfg['playlist_directory'], game['path'])
    game = {**library, **game}  # Fill in missing entries from library
    print("Matched "+game['label'])

    generated[game['label'] + '.desktop'] = f'''\
{HEADER}
[Desktop Entry]
Version=1.0
Name={game['label']}
Type=Application
Icon={_user_dir(cfg['assets_directory'])}/xmb/retrosystem/png/{game['db_name'][:-4]}.png
Exec=retroarch -L "{game['core_path']}" "{game['path']}"
Terminal=false
StartupNotify=false
Keywords={_tokenise(game['db_name'][:-4])};
Categories=Game;Emulator;\
'''

for xdg_file in (f for f in os.scandir(XDG_DIR) if f.is_file() and f.name.endswith('.desktop')):
    with open(xdg_file.path, "r+") as h:
        content = h.read()
        if xdg_file.name in generated:
            if content.startswith(HEADER):
                if generated[xdg_file.name] == content:
                    print("Skip   " + xdg_file.path)
                else:
                    print("Update " + xdg_file.path)
                    h.seek(0)
                    h.write(generated[xdg_file.name])
                    h.truncate()
            else:
                print("Exists " + xdg_file.path)  # File exists but not written by us
            del generated[xdg_file.name]
        elif content.startswith(HEADER):
            print("Delete " + xdg_file.path)
            os.unlink(xdg_file.path)
        else:
            print("Ignore " + xdg_file.path)

for filename, content in generated.items():
    with _user_file(f"{XDG_DIR}/{filename}", "w") as f:
        print(f"Create {f.name}")
        f.write(content)
